<?php 

include('./Employee.php');
include('./Machine.php');

class Database {
    public $name;
    public $db;
    public $link;

    function __construct($dbName){
        $this->name = $dbName;
        $this->link = mysqli_connect('localhost', 'root', '');
        if(!$this->link){
            die('Could not connect: ' . mysql_error());
        }

        $this->db = mysqli_select_db($this->link, $dbName);
        if(!$this->db){
            $this->create_db($this->name);
        }
    }


    /**
     * =====================================================================================
     *                      CREATIONAL FUNCTIONS
     * ====================================================================================
     * Functions create, insert and alters resources
     */
    private function create_db($dbName){
        $sql = "CREATE DATABASE $dbName";
            if(mysqli_query($this->link, $sql)){
                echo "Database created successfully\n";
            }
            else {
                echo "Error creating database: " . mysqli_error() . "\n";
            }
    }

    function create_table($name, $props){
        $sql = $this->create_table_query($name, $props);
        if(mysqli_query($this->link, $sql)){
         echo "Table Created successfully";
         } else {
             echo "Error creating table: " . mysqli_error($this->link);
         }
     }

     /**
      * A helper function that constructs the query to create the table
      *
      * @var string $name
      *  name of the table to bre created
      * @var array $props
      * an associative array with all the tables properties
      */
     private function create_table_query($name, $props){
        $quantity = count($props);
        $i = 0;
        $create = "CREATE TABLE IF NOT EXISTS $name (";
        foreach ($props as $propName => $propValue){
            if(++$i === $quantity) {
                $create .= $propName . ' ' . $propValue . ');';
            }
            else {
                $create .= $propName . ' ' . $propValue . ',';
            }
        }
        return $create;
    }
   
    function insert_record($table, $props){
        $insert = $this->insert_record_query($table, $props);
       if(mysqli_multi_query($this->link, $insert)){
            echo "New Records created successfully";
            $id = mysqli_insert_id($this->link);
            return $id;
        }
        else {
            echo "Error: " . $insert . "<br>" . mysqli_error($this->link);
        }
        
    }
     /**
      * A helper function that constructs the query to insert data
      * broken down into couple of helper functions
      * @var string $table
      *  name of the table to insert into
      * @var array $props
      * an associative array with all the tables properties or an object
      */
    private function insert_record_query($table, $props){
        $insert = "INSERT INTO $table";
        $insert .= $this->fetch_table_col_name($table);
        $insert .= $this->insert_value_query($props);
        return $insert;
    }

     /**
      * A helper function that fetches all of the tables column names
      * To be inserted into on the form INSERT INTO <table_name> (x,y,z)
      * Excluding ID (autogenerated) and emp_ID which initially should be NULL
      * @var string $table
      *  name of the table to insert into
      */
    public function fetch_table_col_name($table){
        $col = mysqli_query($this->link, "SHOW COLUMNS FROM $table");
        $arr = [];
        while($row = mysqli_fetch_array($col)){
            if($row['Field'] == 'ID' || $row['Field'] == 'emp_ID'){
                continue;
            } 
            $arr[] = $row['Field'];
        }

        $fieldString = implode($arr, ',');
        $insert = "($fieldString)";
        
       return $insert;
    }

    /**
      * A helper function that builds the query string for the values
      * To be inserted on the form VALUES (x,y,z)
      * the password field we wrap with the PASSWORD function of sql
      * @var array $props
      *  array with all of the properties to be inserted
      */
    public function insert_value_query($props){
        $values = "VALUES (";
        $numResults = count($props);
        $counter = 0;
        foreach ($props as $prop => $value){
                if($prop == 'Password' || $prop == 'password'){
                    $values .= "PASSWORD('$value')";
                }
                else {
                    $values .= "'$value'";
                }

                if (++$counter == $numResults) {
                    $values .=  ');';
                } 
                else {
                    $values .=  ',';
                }
        }
        return $values;
    }

    private function update_table($table, $valToUpdate, $id){
        /* */
       $query = $this->update_table_query($table, $valToUpdate, $id);
       if(mysqli_query($this->link, $query)){
        echo "Table updated successfully";
        } else {
            echo "Error Updating table: " . mysqli_error($this->link);
        }
        
    }

      /**
      * A helper function that builds the update query string for the values
      * on the form SET A = x, B = y
      * @var string $table
      *  name of the table to be updated
      * @var array $valToUpdate
      * an array with values to update
      * @var int $id 
      * the id of the resource to update
      */
    private function update_table_query($table, $valToUpdate, $id){
        $query ="UPDATE $table SET ";
        $counter = 0;
        $quantity = count($valToUpdate);
        foreach($valToUpdate as $op => $value){
            $query .= $op . '=' . $value;
            if( !(++$counter == $quantity) ){
                $query .= ',';
            }
            
        }
        $query .= " WHERE ID = $id";
        return $query;
    }

    /**
     * ================================================
     * 1. Alter table to account for:
     *      An employee can checkout multiple machines
     *      Each machine can only be assigned to one employee
     * ====================================================
      * 
      * By placing employer_id in the Machines table each machine
      * can only be assigned to one employer but each employer can be
      * assigned to many machines
      */
    function alter_table($table, $ops){
        $alter = "ALTER TABLE $table " . $ops;
        if(mysqli_query($this->link, $alter)){
            echo "Table has been altered";
        }
        else {
            echo "Error altering table: " . mysqli_error($this->link);
        }
        return $alter;
    }

/**
 * =========================================================================================
 *                              QUERY FUNCTIONS
 * ==================================================================================
 * Functions that get certain data from the database
 */

    function getEmployeeById($id){
        $sql = "SELECT ID, Surname, Password FROM Employee WHERE ID = $id";
        $result = $this->link->query($sql);
        
        $emp;
        
        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $emp = new Employee($row['ID'], $row['Surname'], $row['Password']);
            }
        }
        return $emp;
    }

    /**
     * Fetches all the machines that are in use and who is using them
     */
    function get_list_of_machines_and_usage(){
        $sql = "SELECT Title, Surname, Password FROM machine M JOIN employee e 
        ON M.emp_ID = e.ID;";
        $result = $this->link->query($sql);

        $data = array();

        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $data[] = $row;
            }
        }
        return $data;
    }

    /**
     * Is not actually used anymore. 
     * In index.php the section which gets all machiens used by a particular user
     * there was an input box instead of select.  You wrote the name of Employeer 
     * and this function was used to get his id,  the problem with that approach are two
     * Employeers with the exactly the same name, there was no way to differentiate them
     * with an input box, as well as you would have to know their names. By switching to
     * select box I solved both those problems.
     */
    function getEmployeeIdFromName($name){
        $sql = "SELECT ID FROM employee e WHERE e.Surname = '$name';";
        $result = $this->link->query($sql);

        $arr = array();
        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $arr[] = $row;
            }
        }
        return $arr[0]['ID'];
    }

    function getAllEmployees(){
        $sql = "SELECT ID, Surname FROM employee;";
        $result = $this->link->query($sql);
        $results = array();
        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $results[] = $row;
            }
        }
        return $results;
    }

    /**
     * Used to populate the select box to assign a machine to an employee.
     * We do not want the machines already assigned.
     */
    function getAllUnassignedMachines(){
        $sql = "SELECT ID, Title FROM machine m WHERE m.emp_ID IS NULL;";
        $result = $this->link->query($sql);
        $results = array();
        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $results[] = $row;
            }
        }
        return $results;
    }

    function getMachineById($id){
        $sql = "SELECT ID, Title FROM Machine WHERE ID = $id";
        $result = $this->link->query($sql);

        $machine;
        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $machine = new Machine($row['ID'], $row['Title']);
            }
        }
        return $machine;
    }

    /**
     * Gets the highest id in a given table. 
     * The idea was to get the id of last inserted entry
     * but then I found out there is an actualy mysql function that
     * does this for you
     * 
     * @var string $table 
     * Name of the table to get the highest index from
     */
    function getMaxID($table){
        $sql = "SELECT MAX(ID) FROM $table;";
        $result = $this->link->query($sql)->fetch_array()[0];
        return $result;
    }

    /**
     * ====================================================
     *      2 Functionality of a checkout
     * ==============================================
     * When a machine gets assigned to an user,  we update the emp_id
     * field in the corresponding table to that employee id
     */
    public function assignEmployeeToMachine($empID, $machineID){
         $this->update_table('Machine', [
            'emp_ID' => $empID
        ], $machineID);
    }

     /**
     * ====================================================
     *      3 Functionality of returning to warehouse
     * ==============================================
     * When a user returns a machine we set the
     * field in the corresponding table to NULL
     */
    public function returnMachine($machineID){
         $this->update_table('Machine', [
            'emp_ID' => 'NULL'
        ], $machineID);
        
    }

     /**
     * ====================================================
     *      4 Functionality of getting all machines assigned to an employee
     * ==============================================
     * We simply get all the machines with that employer id 
     * @var int $id 
     * the id of the employee
     * 
     */
    public function getAllEmployeeMachinesByEmployeeID($id){
        $sql = "SELECT ID, Title FROM Machine WHERE emp_ID = $id";
        $result = $this->link->query($sql);
        $data = array();
        
        if($result->num_rows > 0){
            while($row = $result->fetch_assoc()){
                $data[] = new Machine($row['ID'], $row['Title']);
            }
        }
        return $data;
    }

    function get_db_name(){
            return $this->name;
    }
}